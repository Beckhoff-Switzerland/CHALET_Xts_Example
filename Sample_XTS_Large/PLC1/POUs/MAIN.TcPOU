<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{936719f5-137b-4475-a74b-81455f5c55bd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bInitDone,bDisable : BOOL;
	bEnable : BOOL;
	bStart : BOOL;
	bPreventMoversFromEntering: BOOL;

	nLoopIndex : UDINT;
	nIdxParentStation, nIdxTargedStation : UINT;
	bStandard, bRestart, bFast : BOOL;
	bStartSimulation, bStopSimulation : BOOL ;
	
	//Example of an external function block that contains the process step of the station.
	fbProcessStationXXX : FB_Station_XXX;
	
	//////////////////////////////////////////////////////////////////////////
	
	(* XTS System - 1 per associated XTS 
		The system is the container and organizer for all subsequent XTS objects. All objects are registered with this system*)
	fbSystem		: CHALET_Xts.FB_XTS_System;
	ipXtsSystem 	: CHALET_Xts.I_XTS_System_PLC := fbSystem;
		
	(* XTS Collision Avoidance Groupe - 1 per associated XTS 
		The CA group is a software object that prevents collisions between movers. 
		When the system is enabled, all movers are added to the group. As a result, only move commands with CA are permitted from this point onwards
		e.g. FB_MoveRelativeCA*)
	fbGroup			: CHALET_Xts.FB_XTS_Group(ipXtsSystem := fbSystem);
	
	(* XTS Environment - 1 per associated XTS 
		The XTS Envirement is a pure software object and offers an interface to the UtilityEnvirement and to important system information such as track length *)
	fbEnvironment	: CHALET_Xts.FB_XTS_Environment(ipXtsSystem := fbSystem);
	
	(* XTS mover - n per associated XTS. Can be instantiated as an array and/or individually *)
	aMovers		: ARRAY[1..cNrOfMovers] OF CHALET_Xts.FB_XTS_Mover(ipXtsSystem := fbSystem);
	
	(* XTS station - n per associated XTS. Can be instantiated as an array and/or individually
	The stations are the main component of the application. As soon as the system has been started up, the movers are only sent from one station to the next.
	Parameters:
		fPositionOnTrack	= Absolute position of the station on the track
		sUniqueName 		= Unique name that may only exist once. A STRING constant makes sense
		nMoverQueueSize 	= There is room for so many movers. 
							  Only when all the required movers are present is the ready signal given to the process above.
							  This parameter can also be written online
		fMoverGapAtExit		= This gap between the movers is active as soon as the mover leaves or crosses the station
							  This parameter can also be written online
		fMoverVelocityAtExit= This velocity of the movers is active as soon as the mover leaves or crosses the station
							  This parameter can also be written online	*)	
	aStations 	: ARRAY[1..cNrOfStations] OF CHALET_Xts.FB_XTS_Station[		
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 800,
												sUniqueName			:= 'StationA_Waiting',
												nMoverQueueSize		:= 6,
												fMoverGapAtExit		:= 80,
												fMoverVelocityAtExit := 2000),
										
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 1000,
												sUniqueName			:= 'StationA',
												nMoverQueueSize		:= 1,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 2000),
																							
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 1500,
												sUniqueName			:= 'StationB_Waiting',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
																																			
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 2000,
												sUniqueName			:= 'StationB',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
																								
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 2500,
												sUniqueName			:= 'StationC_Waiting',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
																								
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 3000,
												sUniqueName			:= 'StationC',
												nMoverQueueSize		:= 3,
												fMoverGapAtExit		:= 60,
												fMoverVelocityAtExit := 1000),
																																			
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 3500,
												sUniqueName			:= 'StationD_Waiting',
												nMoverQueueSize		:= 5,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
													
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 4000,
												sUniqueName			:= 'StationD',
												nMoverQueueSize		:= 4,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
																																			
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 4500,
												sUniqueName			:= 'StationE_Waiting',
												nMoverQueueSize		:= 5,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
													
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 5000,
												sUniqueName			:= 'StationE',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
																																			
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 5500,
												sUniqueName			:= 'StationF_Waiting',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
													
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 6000,
												sUniqueName			:= 'StationF',
												nMoverQueueSize		:= 4,
												fMoverGapAtExit		:= 80,
												fMoverVelocityAtExit := 1000),
																																			
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 6500,
												sUniqueName			:= 'StationG_Waiting',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
													
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 7000,
												sUniqueName			:= 'StationG',
												nMoverQueueSize		:= 5,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
																																		
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 7500,
												sUniqueName			:= 'StationH_Waiting',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
														
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 8000,
												sUniqueName			:= 'StationH',
												nMoverQueueSize		:= 3,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
																																			
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 8500,
												sUniqueName			:= 'StationI_Waiting',
												nMoverQueueSize		:= 5,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 2000),
													
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 9000,
												sUniqueName			:= 'StationI',
												nMoverQueueSize		:= 1,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 2000),
																																			
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 9500,
												sUniqueName			:= 'StationJ_Waiting',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1000),
													
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 10000,
												sUniqueName			:= 'StationJ',
												nMoverQueueSize		:= 2,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 500),
													
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 10500,
												sUniqueName			:= 'StationCurv1Out',
												nMoverQueueSize		:= 0,
												fMoverGapAtExit		:= 70,
												fMoverVelocityAtExit := 2000),
												
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 20000,
												sUniqueName			:= 'StationZ_Waiting',
												nMoverQueueSize		:= 100,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1500),
												
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 20500,
												sUniqueName			:= 'StationCurv2In',
												nMoverQueueSize		:= 0,
												fMoverGapAtExit		:= 80,
												fMoverVelocityAtExit := 250),
												
												(ipXtsSystem 		:= fbSystem,
												fPositionOnTrack	:= 0,
												sUniqueName			:= 'StationCurv2Out',
												nMoverQueueSize		:= 0,
												fMoverGapAtExit		:= 100,
												fMoverVelocityAtExit := 1500)  
												];															
END_VAR
VAR CONSTANT
	cNrOfMovers : USINT := 100;
	cNrOfStations : USINT := 24;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[/// Todo in a new Tc project:
/// - Add CA-Groupe + link to PLC (in MOTION\NC-Task-SAF\Objects)
/// - Set raillength in CA-Groupe
/// - Add XtsInfoServer in TcCOM. Add as many XtsStationInfos as required. Increase StopPositions to Array of size 25.
/// - Info Server: Stations link ObjectId in PLC1 Instance. 
/// -


// As long as the initialization is not completed, skip the rest of the program.
IF NOT bInitDone THEN
	fbSystem.Initialize();
	bInitDone := fbSystem.Initialized;
	
	//Handover interface to process station
	fbProcessStationXXX.ipXtsSystem := ipXtsSystem;
	fbProcessStationXXX.ipStation := ipXtsSystem.Station('StationI');
	RETURN;
END_IF


// "Start up": add the mover to the CA group, search Mover1, enable Groupe, enable Mover. No Movement
IF bEnable AND ipXtsSystem.Initialized AND ipXtsSystem.Disabled THEN
	bEnable := FALSE;	
	ipXtsSystem.Enable();
END_IF


// "Shutdown": Halt Mover, disable Mover, disable Groupe, reset Groupe, reset Mover, remove Mover from Groupe
IF bDisable THEN
	bDisable := FALSE;
	ipXtsSystem.Disable();
END_IF

// First Startup strategy: 
// Send all movers to the "Unload" station.
IF bStart AND ipXtsSystem.Enabled THEN
	bStart := FALSE;
	ipXtsSystem.SuppressAllDynamicsChanges := TRUE;	
	
	// Delete all Queues
	FOR nLoopIndex := 1 TO cNrOfStations DO
		aStations[nLoopIndex].DeleteMoversQueue();
	END_FOR	
	
	// Move + add all mover in parent station 1 (StationA_Waiting). Set as targed station 2 (StationA)
	//(the parent station is not necessarily the target station. But the station that is responsible for sending the mover forward if necessary)
	nIdxTargedStation  := 2;	
	nIdxParentStation := 1;
	FOR nLoopIndex := 1 TO cNrOfMovers DO
		aMovers[nLoopIndex].TargedStation := aStations[nIdxTargedStation].LUID;
		aMovers[nLoopIndex].MoveAbsCA(	fPosition	:=aStations[nIdxParentStation].PositionOnTrack, 
										fVelocity 	:= 1000, 
										fGap 		:= aStations[nIdxParentStation].StationBehinde.MoverGapAtExit, 
										eDirection 	:= Tc3_Mc3Definitions.MC_DIRECTION.mcDirectionPositive);
		aStations[nIdxParentStation].AddMoverToQueue(aMovers[nLoopIndex]);
	END_FOR
END_IF


// Restart strategy: 
// Send all movers to the last known parent station.
//(the parent station is not necessarily the target station. But the station that is responsible for sending the mover forward if necessary)
IF bRestart AND ipXtsSystem.Enabled THEN
	bRestart := FALSE;
	FOR nLoopIndex := 1 TO cNrOfMovers DO
		IF aMovers[nLoopIndex].ParentStation <> 0 THEN
			aMovers[nLoopIndex].MoveAbsCA(	fPosition	:= aMovers[nLoopIndex].ParentStation.PositionOnTrack, 
								fVelocity 	:= aMovers[nLoopIndex].LastCmdTargedVelocity,  
								fGap 		:= aMovers[nLoopIndex].LastCmdTargedGap,  
								eDirection 	:= Tc3_Mc3Definitions.MC_DIRECTION.mcDirectionPositive);
		END_IF
	END_FOR
END_IF


// Configure and Start Simulation
IF bStartSimulation THEN
	bStartSimulation := FALSE;
	ipXtsSystem.SuppressAllDynamicsChanges := FALSE;	//Enable to adjust Gap + Dynamic depending on Station
	ipXtsSystem.Station('StationA').SimulationMode(fProcessDuration := 0.5, sTargedStation := 'StationB');
	ipXtsSystem.Station('StationB').SimulationMode(fProcessDuration := 1.0, sTargedStation := 'StationC');
	ipXtsSystem.Station('StationC').SimulationMode(fProcessDuration := 1.5, sTargedStation := 'StationD');
	ipXtsSystem.Station('StationD').SimulationMode(fProcessDuration := 3.0, sTargedStation := 'StationE');
	ipXtsSystem.Station('StationE').SimulationMode(fProcessDuration := 1.0, sTargedStation := 'StationF');
	ipXtsSystem.Station('StationF').SimulationMode(fProcessDuration := 2.0, sTargedStation := 'StationG');
	ipXtsSystem.Station('StationG').SimulationMode(fProcessDuration := 2.5, sTargedStation := 'StationH');
	ipXtsSystem.Station('StationH').SimulationMode(fProcessDuration := 1.8, sTargedStation := 'StationI');
	
	//Station I: See "Example How to interact with process"
	//XtsSystem.Station('StationI').SimulationMode(fProcessDuration := 0.001, sTargedStation := 'StationJ');
	
	ipXtsSystem.Station('StationJ').SimulationMode(fProcessDuration := 1.0, sTargedStation := 'StationA');

END_IF

// Stop Simulation
IF bStopSimulation THEN
	bStopSimulation := FALSE;
	FOR nLoopIndex := 1 TO cNrOfStations DO
		aStations[nLoopIndex].SimulationMode(0,'');
	END_FOR	
END_IF

// Prevent further movers from entering the station, 
// e.g. to prevent a collision. All movers that are already moving to reach this station will be stopped with a stop 
// and restarted with Ready True.
ipXtsSystem.Station('StationA').ReadyToRecvMovers := NOT bPreventMoversFromEntering; //Toggle this 


// Changing of Gap Mode for Group (including Control Direction!)
// changes control direction to positiv and mode to fast
IF bFast AND ipXtsSystem.Disabled THEN
	bFast := FALSE;
	fbGroup.ChangeGapMode(bFast:= TRUE);
END_IF


// Changes mode to standard and control direction to both
IF bStandard AND ipXtsSystem.Disabled THEN
	bStandard := FALSE;
	fbGroup.ChangeGapMode(bFast:= FALSE);
END_IF


PRG_Example_ProductData_Simple();
//Simple or Advanced. Do not activate both
//PRG_Example_ProductData_Advanced();


//Update system at the end
fbSystem.Update();
fbProcessStationXXX.Update();
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>